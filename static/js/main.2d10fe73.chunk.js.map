{"version":3,"sources":["useModifiedCheck.ts","Claymate.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CONFIRM_MESSAGE","createScene","drawing","size","canvas","exportToCanvas","elements","width","height","ctx","getContext","id","nanoid","imageData","getImageData","Preview","scene","ref","useRef","useEffect","current","putImageData","Claymate","requiredWidth","requiredHeight","onRestore","useState","currentIndex","setCurrentIndex","scenes","setScenes","setModified","modified","onUnload","useCallback","event","returnValue","preventDefault","window","addEventListener","removeEventListener","useModifiedCheck","currentScene","undefined","length","updateScenes","updater","newCurrent","index","addScene","prev","result","className","map","key","onClick","moveToScene","type","aria-label","stopPropagation","findIndex","sc","newIndex","remainingScenes","filter","item","deleteScene","disabled","tmp","moveLeft","moveRight","gif","GIF","forEach","addFrame","on","blob","a","fileSave","fileName","render","reverse","initialData","data","JSON","parse","localStorage","getItem","appState","collaborators","Map","e","loadStorage","App","setDrawing","drawingVersion","setDrawingVersion","innerWidth","innerHeight","dimensions","setDimensions","onResize","onChange","isEqual","el","setItem","stringify","version","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAEMA,G,OAAkB,oDCkBlBC,EAAc,SAClBC,EACAC,GAEA,IAAMC,EAASC,yBAAe,CAAEC,SAAUJ,EAAQI,WAC5CC,EAAQJ,EAAOA,EAAKI,MAAQH,EAAOG,MACnCC,EAASL,EAAOA,EAAKK,OAASJ,EAAOI,OACrCC,EAAML,EAAOM,WAAW,MAC9B,MAAO,CACLC,GAAIC,cACJL,QACAC,SACAK,UAAWJ,EAAIK,aAAa,EAAG,EAAGP,EAAOC,GACzCN,YAIEa,EAAsC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACvCC,EAAMC,iBAA0B,MAOtC,OANAC,qBAAU,WACR,GAAKF,EAAIG,QAAT,CACA,IAAMX,EAAMQ,EAAIG,QAAQV,WAAW,MAC9BD,GACLA,EAAIY,aAAaL,EAAMH,UAAW,EAAG,MACpC,CAACG,IACG,4BAAQC,IAAKA,EAAKV,MAAOS,EAAMT,MAAOC,OAAQQ,EAAMR,UA2O9Cc,EAnOmB,SAAC,GAA4B,IAyHzDC,EACAC,EA1H+BtB,EAAyB,EAAzBA,QAASuB,EAAgB,EAAhBA,UAAgB,EACpBC,qBADoB,mBACrDC,EADqD,KACvCC,EADuC,OAEhCF,mBAAkB,IAFc,mBAErDG,EAFqD,KAE7CC,EAF6C,KAGtDC,EDpDwB,WAAO,IAAD,EACJL,oBAAS,GADL,mBAC7BM,EAD6B,KACnBD,EADmB,KAE9BE,EAAWC,uBACf,SAACC,GACC,GAAIH,EACF,OAAIG,GAEFA,EAAMC,YAAcpC,EACpBmC,EAAME,iBACCF,GAEFnC,IAGX,CAACgC,IAUH,OAPAb,qBAAU,WAER,OADAmB,OAAOC,iBAAiB,eAAgBN,GACjC,WACLK,OAAOE,oBAAoB,eAAgBP,MAE5C,CAACA,IAEGF,EC4BaU,GAEdC,OACaC,IAAjBhB,GAA8BA,EAAeE,EAAOe,OAApD,2BACSf,EAAOF,IADhB,IAC+BzB,iBAC3ByC,EAOAE,EAAeX,uBACnB,SACEY,EACAC,GAEAjB,EAAUgB,GACVf,GAAY,GACRgB,IACFtB,EAAUsB,EAAW7C,SACrB0B,EAAgBmB,EAAWC,UAG/B,CAACjB,EAAaH,EAAiBH,IAiB3BwB,EAAWf,uBAAY,WAC3B,GAAIhC,EAAS,CACX,IAAMc,EAAQf,EACZC,EACA2B,EAAO,IAAM,CACXtB,MAAOsB,EAAO,GAAGtB,MACjBC,OAAQqB,EAAO,GAAGrB,SAGtBqC,GAAa,SAACK,GAAD,4BAAcA,GAAd,CAAoBlC,MAAQ,CACvCgC,MAAOnB,EAAOe,OACd1C,QAASA,OAGZ,CAAC2C,EAAchB,EAAQ3B,IAgG1B,OAvCAiB,qBAAU,WACc,IAAlBU,EAAOe,QACTK,MAED,CAACpB,EAAQoB,IAIQ,MAAhBP,GAA0C,IAAlBb,EAAOe,SACjCrB,EAAgBmB,EAAanC,MAC7BiB,EAAiBkB,EAAalC,QAGhCW,qBAAU,WACR,GAAoB,MAAhBQ,EAAsB,CACxB,IAAMX,EAAQf,EACZC,OACkByC,IAAlBpB,QAAkDoB,IAAnBnB,OAC3BmB,EACA,CACEpC,MAAOgB,EACPf,OAAQgB,IAGhBqB,GAAa,SAACK,GACZ,IAAMC,EAAM,YAAOD,GAEnB,OADAC,EAAOxB,GAAgBX,EAChBmC,SACNR,MAEJ,CACDzC,EACAyB,EACAE,EAAOe,OACPC,EACAtB,EACAC,IAIA,yBAAK4B,UAAU,YACb,yBAAKA,UAAU,mBACZvB,EAAOwB,KAAI,SAACrC,EAAOgC,GAAR,OACV,yBACEM,IAAKtC,EAAML,GACXyC,UAAS,yBACPJ,IAAUrB,EAAe,yBAA2B,IAEtD4B,QAAS,kBAzJC,SAACP,GACnBvB,EAAUI,EAAOmB,GAAO9C,SACxB0B,EAAgBoB,GAuJOQ,CAAYR,KAE3B,kBAAC,EAAD,CAAShC,MAAOA,IAChB,4BACEyC,KAAK,SACLL,UAAU,kBACVM,aAAW,SACXH,QAAS,SAACpB,GACRA,EAAMwB,kBA/GA,SAAChD,GACnB,IAAMqC,EAAQnB,EAAO+B,WAAU,SAACC,GAAD,OAAQA,EAAGlD,KAAOA,KACjD,GAAIqC,GAAS,EAAG,CACd,IACIc,EADEC,EAAkBlC,EAAOe,OAAS,EAEpCmB,EAAkB,IACpBD,EAAWd,EAAQe,EAAkBf,EAAQe,EAAkB,GAEjE,IAAMhB,OACSJ,IAAbmB,EACI,CAAEd,MAAOc,EAAU5D,QAAS2B,EAAOiC,GAAU5D,cAC7CyC,EAENE,GAAa,SAACK,GAAD,OAAUA,EAAKc,QAAO,SAACC,GAAD,OAAUA,EAAKtD,KAAOA,OAAKoC,IAmGpDmB,CAAYlD,EAAML,MANtB,UAWA,4BACE8C,KAAK,SACLL,UAAU,gBACVM,aAAW,YACXS,SAAoB,IAAVnB,EACVO,QAAS,SAACpB,GACRA,EAAMwB,kBA1GH,SAAChD,GAChB,IAAMqC,EAAQnB,EAAO+B,WAAU,SAACK,GAAD,OAAUA,EAAKtD,KAAOA,KACrDkC,GACE,SAACK,GACC,IAAMkB,EAAG,YAAOlB,GAGhB,OAFAkB,EAAIpB,EAAQ,GAAKE,EAAKF,GACtBoB,EAAIpB,GAASE,EAAKF,EAAQ,GACnBoB,IAET,CAAEpB,MAAOA,EAAQ,EAAG9C,QAAS2B,EAAOmB,GAAO9C,UAkGjCmE,CAASrD,EAAML,MAPnB,UAYA,4BACE8C,KAAK,SACLL,UAAU,iBACVM,aAAW,aACXS,SAAUnB,IAAUnB,EAAOe,OAAS,EACpCW,QAAS,SAACpB,GACRA,EAAMwB,kBAzGF,SAAChD,GACjB,IAAMqC,EAAQnB,EAAO+B,WAAU,SAACK,GAAD,OAAUA,EAAKtD,KAAOA,KACrDkC,GACE,SAACK,GACC,IAAMkB,EAAG,YAAOlB,GAGhB,OAFAkB,EAAIpB,EAAQ,GAAKE,EAAKF,GACtBoB,EAAIpB,GAASE,EAAKF,EAAQ,GACnBoB,IAET,CAAEpB,MAAOA,EAAQ,EAAG9C,QAAS2B,EAAOmB,GAAO9C,UAiGjCoE,CAAUtD,EAAML,MAPpB,eAeN,yBAAKyC,UAAU,oBACb,4BAAQK,KAAK,SAASF,QAASN,GAA/B,aAGA,4BACEQ,KAAK,SACLF,QApLU,WAChB,IAAMgB,EAAM,IAAIC,IAChB3C,EAAO4C,SAAQ,SAACzD,GACduD,EAAIG,SAAS1D,EAAMH,cAErB0D,EAAII,GAAG,WAAP,uCAAmB,WAAOC,GAAP,SAAAC,EAAA,sEACXC,YAASF,EAAM,CACnBG,SAAU,4BAFK,OAIjBhD,GAAY,GAJK,2CAAnB,uDAMAwC,EAAIS,UA0KEb,SAA4B,IAAlBtC,EAAOe,QAHnB,cAOA,4BACEa,KAAK,SACLF,QAlHa,WACnBV,GACE,SAACK,GAAD,OAAU,YAAIA,GAAM+B,iBACHtC,IAAjBhB,EACI,CACEqB,MAAOnB,EAAOe,OAAS,EAAIjB,EAC3BzB,QAAS2B,EAAOF,GAAczB,cAEhCyC,IA2GAwB,SAAUtC,EAAOe,QAAU,GAH7B,oBCnPJsC,EAdgB,WAClB,IACE,IAAMC,EAAOC,KAAKC,MAAMC,aAAaC,QAJrB,wBAI6C,IAE7D,OADAJ,EAAKK,SAASC,cAAgB,IAAIC,IAC3BP,EACP,MAAOQ,GACP,OAAO,MAQOC,GA0DHC,EAxDO,WAAO,IAAD,EACInE,mBAAkBwD,GADtB,mBACnBhF,EADmB,KACV4F,EADU,OAEkBpE,mBAAS,GAF3B,mBAEnBqE,EAFmB,KAEHC,EAFG,OAyBUtE,mBAAS,CAC3CnB,MAAO+B,OAAO2D,WACdzF,OAAQ8B,OAAO4D,cA3BS,mBAyBnBC,EAzBmB,KAyBPC,EAzBO,KA8B1BjF,qBAAU,WACR,IAAMkF,EAAW,WACfD,EAAc,CACZ7F,MAAO+B,OAAO2D,WACdzF,OAAQ8B,OAAO4D,eAInB,OADA5D,OAAOC,iBAAiB,SAAU8D,GAC3B,kBAAM/D,OAAOE,oBAAoB,SAAU6D,MACjD,IAvCuB,IAyClB9F,EAAkB4F,EAAlB5F,MAAOC,EAAW2F,EAAX3F,OACf,OACE,yBAAK4C,UAAU,eACb,kBAAC,IAAD,CACEE,IAAKyC,EACLxF,MAAOA,EACPC,OAAQA,EACR0E,YAAaA,EACboB,SAxCW,SAAChG,EAAqBkF,GAfrB,IAACL,EAiBJ,MAAXjF,GACCqG,IAAQjG,EAAUJ,EAAQI,WAC1BiG,IAAQf,EAAUtF,EAAQsF,WAE3BM,EAAW,CACTxF,SAAUA,EAAS+C,KAAI,SAACmD,GACtB,OAAO,eAAMA,MAEfhB,SAAS,eAAOA,KAzBHL,EA4BL,CAAE7E,WAAUkF,YA3B1BF,aAAamB,QAbK,sBAagBrB,KAAKsB,UAAUvB,OAwD7C,kBAAC,EAAD,CAAUjF,QAASA,EAASuB,UA/Cd,SAACvB,GACjB8F,GAAkB,SAACW,GAAD,OAAaA,EAAU,KACzCzB,EAAchF,OCrBE0G,QACW,cAA7BtE,OAAOuE,SAASC,UAEe,UAA7BxE,OAAOuE,SAASC,UAEhBxE,OAAOuE,SAASC,SAASC,MACvB,2DCZNC,IAAShC,OACP,kBAAC,IAAMiC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2d10fe73.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nconst CONFIRM_MESSAGE = \"Any unsaved changes will be lost.  Are you sure?\";\n\nexport const useModifiedCheck = () => {\n  const [modified, setModified] = useState(false);\n  const onUnload = useCallback(\n    (event) => {\n      if (modified) {\n        if (event) {\n          // NB: Chrome & Firefox ignore the message but display an equivalent generic message\n          event.returnValue = CONFIRM_MESSAGE;\n          event.preventDefault();\n          return event;\n        }\n        return CONFIRM_MESSAGE;\n      }\n    },\n    [modified]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", onUnload);\n    return () => {\n      window.removeEventListener(\"beforeunload\", onUnload);\n    };\n  }, [onUnload]);\n\n  return setModified;\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { fileSave } from \"browser-nativefs\";\n// @ts-ignore\nimport GIF from \"gif.js/dist/gif\";\n// @ts-ignore\nimport { exportToCanvas } from \"@excalidraw/utils\";\n\nimport \"./Claymate.css\";\nimport { Drawing } from \"./types\";\nimport { useModifiedCheck } from \"./useModifiedCheck\";\n\ntype Scene = {\n  id: string;\n  width: number;\n  height: number;\n  imageData: ImageData;\n  drawing: Drawing;\n};\n\nconst createScene = (\n  drawing: Drawing,\n  size?: { width: number; height: number }\n): Scene => {\n  const canvas = exportToCanvas({ elements: drawing.elements });\n  const width = size ? size.width : canvas.width;\n  const height = size ? size.height : canvas.height;\n  const ctx = canvas.getContext(\"2d\");\n  return {\n    id: nanoid(),\n    width,\n    height,\n    imageData: ctx.getImageData(0, 0, width, height),\n    drawing,\n  };\n};\n\nconst Preview: React.FC<{ scene: Scene }> = ({ scene }) => {\n  const ref = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    if (!ref.current) return;\n    const ctx = ref.current.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.putImageData(scene.imageData, 0, 0);\n  }, [scene]);\n  return <canvas ref={ref} width={scene.width} height={scene.height} />;\n};\n\ntype Props = {\n  drawing: Drawing;\n  onRestore: (drawing: Drawing) => void;\n};\n\nconst Claymate: React.FC<Props> = ({ drawing, onRestore }) => {\n  const [currentIndex, setCurrentIndex] = useState<number | undefined>();\n  const [scenes, setScenes] = useState<Scene[]>([]);\n  const setModified = useModifiedCheck();\n\n  const currentScene =\n    currentIndex !== undefined && currentIndex < scenes.length\n      ? { ...scenes[currentIndex], drawing }\n      : undefined;\n\n  const moveToScene = (index: number) => {\n    onRestore(scenes[index].drawing);\n    setCurrentIndex(index);\n  };\n\n  const updateScenes = useCallback(\n    (\n      updater: (prev: Scene[]) => Scene[],\n      newCurrent?: { index: number; drawing: Drawing }\n    ) => {\n      setScenes(updater);\n      setModified(true);\n      if (newCurrent) {\n        onRestore(newCurrent.drawing);\n        setCurrentIndex(newCurrent.index);\n      }\n    },\n    [setModified, setCurrentIndex, onRestore]\n  );\n\n  const exportGif = () => {\n    const gif = new GIF();\n    scenes.forEach((scene) => {\n      gif.addFrame(scene.imageData);\n    });\n    gif.on(\"finished\", async (blob: Blob) => {\n      await fileSave(blob, {\n        fileName: \"excalidraw-claymate.gif\",\n      });\n      setModified(false);\n    });\n    gif.render();\n  };\n\n  const addScene = useCallback(() => {\n    if (drawing) {\n      const scene = createScene(\n        drawing,\n        scenes[0] && {\n          width: scenes[0].width,\n          height: scenes[0].height,\n        }\n      );\n      updateScenes((prev) => [...prev, scene], {\n        index: scenes.length,\n        drawing: drawing,\n      });\n    }\n  }, [updateScenes, scenes, drawing]);\n\n  const deleteScene = (id: string) => {\n    const index = scenes.findIndex((sc) => sc.id === id);\n    if (index >= 0) {\n      const remainingScenes = scenes.length - 1;\n      let newIndex;\n      if (remainingScenes > 0) {\n        newIndex = index < remainingScenes ? index : remainingScenes - 1;\n      }\n      const newCurrent =\n        newIndex !== undefined\n          ? { index: newIndex, drawing: scenes[newIndex].drawing }\n          : undefined;\n\n      updateScenes((prev) => prev.filter((item) => item.id !== id), newCurrent);\n    }\n  };\n\n  const moveLeft = (id: string) => {\n    const index = scenes.findIndex((item) => item.id === id);\n    updateScenes(\n      (prev) => {\n        const tmp = [...prev];\n        tmp[index - 1] = prev[index];\n        tmp[index] = prev[index - 1];\n        return tmp;\n      },\n      { index: index - 1, drawing: scenes[index].drawing }\n    );\n  };\n\n  const moveRight = (id: string) => {\n    const index = scenes.findIndex((item) => item.id === id);\n    updateScenes(\n      (prev) => {\n        const tmp = [...prev];\n        tmp[index + 1] = prev[index];\n        tmp[index] = prev[index + 1];\n        return tmp;\n      },\n      { index: index + 1, drawing: scenes[index].drawing }\n    );\n  };\n\n  const reverseOrder = () => {\n    updateScenes(\n      (prev) => [...prev].reverse(),\n      currentIndex !== undefined\n        ? {\n            index: scenes.length - 1 - currentIndex,\n            drawing: scenes[currentIndex].drawing,\n          }\n        : undefined\n    );\n  };\n\n  useEffect(() => {\n    if (scenes.length === 0) {\n      addScene();\n    }\n  }, [scenes, addScene]);\n\n  let requiredWidth: number | undefined;\n  let requiredHeight: number | undefined;\n  if (currentScene != null && scenes.length !== 1) {\n    requiredWidth = currentScene.width;\n    requiredHeight = currentScene.height;\n  }\n\n  useEffect(() => {\n    if (currentIndex != null) {\n      const scene = createScene(\n        drawing,\n        requiredWidth === undefined || requiredHeight === undefined\n          ? undefined\n          : {\n              width: requiredWidth,\n              height: requiredHeight,\n            }\n      );\n      updateScenes((prev) => {\n        const result = [...prev];\n        result[currentIndex] = scene;\n        return result;\n      }, undefined);\n    }\n  }, [\n    drawing,\n    currentIndex,\n    scenes.length,\n    updateScenes,\n    requiredWidth,\n    requiredHeight,\n  ]);\n\n  return (\n    <div className=\"Claymate\">\n      <div className=\"Claymate-scenes\">\n        {scenes.map((scene, index) => (\n          <div\n            key={scene.id}\n            className={`Claymate-scene ${\n              index === currentIndex ? \"Claymate-current-scene\" : \"\"\n            }`}\n            onClick={() => moveToScene(index)}\n          >\n            <Preview scene={scene} />\n            <button\n              type=\"button\"\n              className=\"Claymate-delete\"\n              aria-label=\"Delete\"\n              onClick={(event) => {\n                event.stopPropagation();\n                deleteScene(scene.id);\n              }}\n            >\n              &#x2716;\n            </button>\n            <button\n              type=\"button\"\n              className=\"Claymate-left\"\n              aria-label=\"Move Left\"\n              disabled={index === 0}\n              onClick={(event) => {\n                event.stopPropagation();\n                moveLeft(scene.id);\n              }}\n            >\n              &#x2b05;\n            </button>\n            <button\n              type=\"button\"\n              className=\"Claymate-right\"\n              aria-label=\"Move Right\"\n              disabled={index === scenes.length - 1}\n              onClick={(event) => {\n                event.stopPropagation();\n                moveRight(scene.id);\n              }}\n            >\n              &#x27a1;\n            </button>\n          </div>\n        ))}\n      </div>\n      <div className=\"Claymate-buttons\">\n        <button type=\"button\" onClick={addScene}>\n          Add scene\n        </button>\n        <button\n          type=\"button\"\n          onClick={exportGif}\n          disabled={scenes.length === 0}\n        >\n          Export GIF\n        </button>\n        <button\n          type=\"button\"\n          onClick={reverseOrder}\n          disabled={scenes.length <= 1}\n        >\n          Reverse order\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Claymate;\n","import React, { useEffect, useState } from \"react\";\n// @ts-ignore\nimport Excalidraw from \"@excalidraw/excalidraw\";\nimport isEqual from \"lodash/isEqual\";\n\nimport \"./App.css\";\nimport Claymate from \"./Claymate\";\nimport { Drawing } from \"./types\";\n\nconst STORAGE_KEY = \"excalidraw-elements\";\n\nconst loadStorage = () => {\n  try {\n    const data = JSON.parse(localStorage.getItem(STORAGE_KEY) || \"\");\n    data.appState.collaborators = new Map();\n    return data;\n  } catch (e) {\n    return null;\n  }\n};\n\nconst saveStorage = (data: unknown) => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n};\n\nlet initialData = loadStorage();\n\nconst App: React.FC = () => {\n  const [drawing, setDrawing] = useState<Drawing>(initialData);\n  const [drawingVersion, setDrawingVersion] = useState(0);\n\n  const onRestore = (drawing: Drawing) => {\n    setDrawingVersion((version) => version + 1);\n    initialData = drawing;\n  };\n\n  const onChange = (elements: unknown[], appState: unknown) => {\n    if (\n      drawing == null ||\n      !isEqual(elements, drawing.elements) ||\n      !isEqual(appState, drawing.appState)\n    ) {\n      setDrawing({\n        elements: elements.map((el) => {\n          return { ...(el as any) };\n        }),\n        appState: { ...(appState as any) },\n      });\n    }\n    saveStorage({ elements, appState });\n  };\n\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const onResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n    window.addEventListener(\"resize\", onResize);\n    return () => window.removeEventListener(\"resize\", onResize);\n  }, []);\n\n  const { width, height } = dimensions;\n  return (\n    <div className=\"ClaymateApp\">\n      <Excalidraw\n        key={drawingVersion}\n        width={width}\n        height={height}\n        initialData={initialData}\n        onChange={onChange}\n      />\n      <Claymate drawing={drawing} onRestore={onRestore} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}