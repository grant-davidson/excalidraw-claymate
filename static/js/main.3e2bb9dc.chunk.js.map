{"version":3,"sources":["Claymate.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Preview","snapshot","ref","useRef","useEffect","current","ctx","getContext","putImageData","imageData","width","height","Claymate","lastElementsRef","useState","snapshots","setSnapshots","className","map","index","key","id","type","aria-label","onClick","prev","filter","item","disabled","findIndex","tmp","length","size","canvas","exportToCanvas","elements","nanoid","getImageData","createSnapshot","gif","GIF","forEach","addFrame","on","blob","a","fileSave","fileName","render","reverse","initialData","data","JSON","parse","localStorage","getItem","appState","collaborators","Map","e","loadStorage","App","window","innerWidth","innerHeight","dimensions","setDimensions","onResize","addEventListener","removeEventListener","onChange","setItem","stringify","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e2bb9dc.chunk.js","sourcesContent":["import React, { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { fileSave } from \"browser-nativefs\";\n// @ts-ignore\nimport GIF from \"gif.js/dist/gif\";\n// @ts-ignore\nimport { exportToCanvas } from \"@excalidraw/utils\";\n\nimport \"./Claymate.css\";\n\ntype Snapshot = {\n  id: string;\n  width: number;\n  height: number;\n  imageData: ImageData;\n};\n\nconst createSnapshot = (\n  lastElementsRef: MutableRefObject<unknown[]>,\n  size?: { width: number; height: number }\n): Snapshot => {\n  const canvas = exportToCanvas({ elements: lastElementsRef.current });\n  const width = size ? size.width : canvas.width;\n  const height = size ? size.height : canvas.height;\n  const ctx = canvas.getContext(\"2d\");\n  return {\n    id: nanoid(),\n    width,\n    height,\n    imageData: ctx.getImageData(0, 0, width, height),\n  };\n};\n\nconst Preview: React.FC<{ snapshot: Snapshot }> = ({ snapshot }) => {\n  const ref = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    if (!ref.current) return;\n    const ctx = ref.current.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.putImageData(snapshot.imageData, 0, 0);\n  }, [snapshot]);\n  return <canvas ref={ref} width={snapshot.width} height={snapshot.height} />;\n};\n\ntype Props = {\n  lastElementsRef: MutableRefObject<unknown[]>;\n};\n\nconst Claymate: React.FC<Props> = ({ lastElementsRef }) => {\n  const [snapshots, setSnapshots] = useState<Snapshot[]>([]);\n  const exportGif = () => {\n    const gif = new GIF();\n    snapshots.forEach((snapshot) => {\n      gif.addFrame(snapshot.imageData);\n    });\n    gif.on(\"finished\", async (blob: Blob) => {\n      await fileSave(blob, {\n        fileName: \"excalidraw-claymate.gif\",\n      });\n    });\n    gif.render();\n  };\n  const addSnapshot = () => {\n    const snapshot = createSnapshot(\n      lastElementsRef,\n      snapshots[0] && {\n        width: snapshots[0].width,\n        height: snapshots[0].height,\n      }\n    );\n    setSnapshots((prev) => [...prev, snapshot]);\n  };\n  const deleteSnapshot = (id: string) => {\n    setSnapshots((prev) => prev.filter((item) => item.id !== id));\n  };\n  const moveLeft = (id: string) => {\n    setSnapshots((prev) => {\n      const index = prev.findIndex((item) => item.id === id);\n      const tmp = [...prev];\n      tmp[index - 1] = prev[index];\n      tmp[index] = prev[index - 1];\n      return tmp;\n    });\n  };\n  const moveRight = (id: string) => {\n    setSnapshots((prev) => {\n      const index = prev.findIndex((item) => item.id === id);\n      const tmp = [...prev];\n      tmp[index + 1] = prev[index];\n      tmp[index] = prev[index + 1];\n      return tmp;\n    });\n  };\n  const reverseOrder = () => {\n    setSnapshots((prev) => [...prev].reverse());\n  };\n  return (\n    <div className=\"Claymate\">\n      <div className=\"Claymate-snapshots\">\n        {snapshots.map((snapshot, index) => (\n          <div key={snapshot.id} className=\"Claymate-snapshot\">\n            <Preview snapshot={snapshot} />\n            <button\n              type=\"button\"\n              className=\"Claymate-delete\"\n              aria-label=\"Delete\"\n              onClick={() => deleteSnapshot(snapshot.id)}\n            >\n              &#x2716;\n            </button>\n            <button\n              type=\"button\"\n              className=\"Claymate-left\"\n              aria-label=\"Move Left\"\n              disabled={index === 0}\n              onClick={() => moveLeft(snapshot.id)}\n            >\n              &#x2b05;\n            </button>\n            <button\n              type=\"button\"\n              className=\"Claymate-right\"\n              aria-label=\"Move Right\"\n              disabled={index === snapshots.length - 1}\n              onClick={() => moveRight(snapshot.id)}\n            >\n              &#x27a1;\n            </button>\n          </div>\n        ))}\n      </div>\n      <div className=\"Claymate-buttons\">\n        <button type=\"button\" onClick={addSnapshot}>\n          Add snapshot\n        </button>\n        <button\n          type=\"button\"\n          onClick={exportGif}\n          disabled={snapshots.length === 0}\n        >\n          Export GIF\n        </button>\n        <button\n          type=\"button\"\n          onClick={reverseOrder}\n          disabled={snapshots.length <= 1}\n        >\n          Reverse order\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Claymate;\n","import React, { useEffect, useState, useRef } from \"react\";\n// @ts-ignore\nimport Excalidraw from \"@excalidraw/excalidraw\";\n\nimport \"./App.css\";\nimport Claymate from \"./Claymate\";\n\nconst STORAGE_KEY = \"excalidraw-elements\";\n\nconst loadStorage = () => {\n  try {\n    const data = JSON.parse(localStorage.getItem(STORAGE_KEY) || \"\");\n    data.appState.collaborators = new Map();\n    return data;\n  } catch (e) {\n    return null;\n  }\n};\n\nconst saveStorage = (data: unknown) => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n};\n\nconst initialData = loadStorage();\n\nconst App: React.FC = () => {\n  const lastElementsRef = useRef<unknown[]>([]);\n\n  const onChange = (elements: unknown[], appState: unknown) => {\n    lastElementsRef.current = elements;\n    saveStorage({ elements, appState });\n  };\n\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const onResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n    window.addEventListener(\"resize\", onResize);\n    return () => window.removeEventListener(\"resize\", onResize);\n  }, []);\n\n  const { width, height } = dimensions;\n  return (\n    <div className=\"ClaymateApp\">\n      <Excalidraw\n        width={width}\n        height={height}\n        initialData={initialData}\n        onChange={onChange}\n      />\n      <Claymate lastElementsRef={lastElementsRef} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}