{"version":3,"sources":["useModifiedCheck.ts","exportToGif.ts","exportToHtml.ts","Claymate.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CONFIRM_MESSAGE","exportToGif","scenes","Promise","resolve","gif","GIF","forEach","scene","addFrame","imageData","on","blob","fileSave","fileName","then","render","exportToHtml","a","html","length","index","svg","exportToSvg","drawing","id","style","display","outerHTML","Blob","type","createScene","size","canvas","exportToCanvas","elements","width","height","ctx","getContext","nanoid","getImageData","Preview","ref","useRef","useEffect","current","putImageData","Claymate","requiredWidth","requiredHeight","onRestore","useState","currentIndex","setCurrentIndex","setScenes","setModified","modified","onUnload","useCallback","event","returnValue","preventDefault","window","addEventListener","removeEventListener","useModifiedCheck","currentScene","undefined","updateScenes","updater","newCurrent","exportGif","exportHtml","addScene","prev","result","className","map","key","onClick","moveToScene","aria-label","stopPropagation","findIndex","sc","newIndex","remainingScenes","filter","item","deleteScene","disabled","tmp","moveLeft","moveRight","reverse","initialData","data","JSON","parse","localStorage","getItem","appState","collaborators","Map","e","loadStorage","App","setDrawing","drawingVersion","setDrawingVersion","onChange","isEqual","el","setItem","stringify","version","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gUAEMA,G,OAAkB,oD,yBCIXC,EAAc,SAACC,GAAD,OACzB,IAAIC,SAAQ,SAACC,GACX,IAAMC,EAAM,IAAIC,IAChBJ,EAAOK,SAAQ,SAACC,GACdH,EAAII,SAASD,EAAME,cAErBL,EAAIM,GAAG,YAAY,SAACC,GAClBC,YAASD,EAAM,CACbE,SAAU,4BACTC,KAAKX,MAEVC,EAAIW,aCZKC,EAAY,uCAAG,WAAOf,GAAP,eAAAgB,EAAA,6DACtBC,EADsB,mZAY0BjB,EAAOkB,OAAS,EAZ1C,0vBAiC1BlB,EAAOK,SAAQ,SAACC,EAAOa,GACrB,IAAMC,EAAqBC,sBAAYf,EAAMgB,SAC7CF,EAAIG,GAAJ,eAAiBJ,GACjBC,EAAII,MAAMC,QAAU,OACpBR,GAAQG,EAAIM,aAEdT,GAAQ,iBAvCkB,SAwCpBN,YAAS,IAAIgB,KAAK,CAACV,GAAO,CAAEW,KAAM,cAAgB,CACtDhB,SAAU,6BAzCc,2CAAH,sDCKnBiB,EAAc,SAClBP,EACAQ,GAEA,IAAMC,EAASC,yBAAe,CAAEC,SAAUX,EAAQW,WAC5CC,EAAQJ,EAAOA,EAAKI,MAAQH,EAAOG,MACnCC,EAASL,EAAOA,EAAKK,OAASJ,EAAOI,OACrCC,EAAML,EAAOM,WAAW,MAC9B,GAAID,EACF,MAAO,CACLb,GAAIe,cACJJ,QACAC,SACA3B,UAAW4B,EAAIG,aAAa,EAAG,EAAGL,EAAOC,GACzCb,YAKAkB,EAAsC,SAAC,GAAe,IAAblC,EAAY,EAAZA,MACvCmC,EAAMC,iBAA0B,MAOtC,OANAC,qBAAU,WACR,GAAKF,EAAIG,QAAT,CACA,IAAMR,EAAMK,EAAIG,QAAQP,WAAW,MAC9BD,GACLA,EAAIS,aAAavC,EAAME,UAAW,EAAG,MACpC,CAACF,IACG,4BAAQmC,IAAKA,EAAKP,MAAO5B,EAAM4B,MAAOC,OAAQ7B,EAAM6B,UAkP9CW,EA1OmB,SAAC,GAA4B,IAuHzDC,EACAC,EAxH+B1B,EAAyB,EAAzBA,QAAS2B,EAAgB,EAAhBA,UAAgB,EACpBC,qBADoB,mBACrDC,EADqD,KACvCC,EADuC,OAEhCF,mBAAkB,IAFc,mBAErDlD,EAFqD,KAE7CqD,EAF6C,KAGtDC,EH5CwB,WAAO,IAAD,EACJJ,oBAAS,GADL,mBAC7BK,EAD6B,KACnBD,EADmB,KAE9BE,EAAWC,uBACf,SAACC,GACC,GAAIH,EACF,OAAIG,GAEFA,EAAMC,YAAc7D,EACpB4D,EAAME,iBACCF,GAEF5D,IAGX,CAACyD,IAUH,OAPAZ,qBAAU,WAER,OADAkB,OAAOC,iBAAiB,eAAgBN,GACjC,WACLK,OAAOE,oBAAoB,eAAgBP,MAE5C,CAACA,IAEGF,EGoBaU,GAEdC,OACaC,IAAjBf,GAA8BA,EAAenD,EAAOkB,OAApD,2BACSlB,EAAOmD,IADhB,IAC+B7B,iBAC3B4C,EAOAC,EAAeV,uBACnB,SACEW,EACAC,GAEAhB,EAAUe,GACVd,GAAY,GACRe,IACFpB,EAAUoB,EAAW/C,SACrB8B,EAAgBiB,EAAWlD,UAG/B,CAACmC,EAAaF,EAAiBH,IAG3BqB,EAAS,uCAAG,sBAAAtD,EAAA,sEACVjB,EAAYC,GADF,OAEhBsD,GAAY,GAFI,2CAAH,qDAKTiB,EAAU,uCAAG,sBAAAvD,EAAA,sEACXD,EAAaf,GADF,OAEjBsD,GAAY,GAFK,2CAAH,qDAKVkB,EAAWf,uBAAY,WAC3B,GAAInC,EAAS,CACX,IAAMhB,EAAQuB,EACZP,EACAtB,EAAO,IAAM,CACXkC,MAAOlC,EAAO,GAAGkC,MACjBC,OAAQnC,EAAO,GAAGmC,SAGlB7B,GACF6D,GAAa,SAACM,GAAD,4BAAcA,GAAd,CAAoBnE,MAAQ,CACvCa,MAAOnB,EAAOkB,OACdI,QAASA,OAId,CAAC6C,EAAcnE,EAAQsB,IAkG1B,OAzCAqB,qBAAU,WACc,IAAlB3C,EAAOkB,QACTsD,MAED,CAACxE,EAAQwE,IAIQ,MAAhBP,GAA0C,IAAlBjE,EAAOkB,SACjC6B,EAAgBkB,EAAa/B,MAC7Bc,EAAiBiB,EAAa9B,QAGhCQ,qBAAU,WACR,GAAoB,MAAhBQ,EAAsB,CACxB,IAAM7C,EAAQuB,EACZP,OACkB4C,IAAlBnB,QAAkDmB,IAAnBlB,OAC3BkB,EACA,CACEhC,MAAOa,EACPZ,OAAQa,IAGZ1C,GACF6D,GAAa,SAACM,GACZ,IAAMC,EAAM,YAAOD,GAEnB,OADAC,EAAOvB,GAAgB7C,EAChBoE,SACNR,MAGN,CACD5C,EACA6B,EACAnD,EAAOkB,OACPiD,EACApB,EACAC,IAIA,yBAAK2B,UAAU,YACb,yBAAKA,UAAU,mBACZ3E,EAAO4E,KAAI,SAACtE,EAAOa,GAAR,OACV,yBACE0D,IAAKvE,EAAMiB,GACXoD,UAAS,yBACPxD,IAAUgC,EAAe,yBAA2B,IAEtD2B,QAAS,kBAzJC,SAAC3D,GACnB8B,EAAUjD,EAAOmB,GAAOG,SACxB8B,EAAgBjC,GAuJO4D,CAAY5D,KAE3B,kBAAC,EAAD,CAASb,MAAOA,IAChB,4BACEsB,KAAK,SACL+C,UAAU,kBACVK,aAAW,SACXF,QAAS,SAACpB,GACRA,EAAMuB,kBAjHA,SAAC1D,GACnB,IAAMJ,EAAQnB,EAAOkF,WAAU,SAACC,GAAD,OAAQA,EAAG5D,KAAOA,KACjD,GAAIJ,GAAS,EAAG,CACd,IACIiE,EADEC,EAAkBrF,EAAOkB,OAAS,EAEpCmE,EAAkB,IACpBD,EAAWjE,EAAQkE,EAAkBlE,EAAQkE,EAAkB,GAEjE,IAAMhB,OACSH,IAAbkB,EACI,CAAEjE,MAAOiE,EAAU9D,QAAStB,EAAOoF,GAAU9D,cAC7C4C,EAENC,GAAa,SAACM,GAAD,OAAUA,EAAKa,QAAO,SAACC,GAAD,OAAUA,EAAKhE,KAAOA,OAAK8C,IAqGpDmB,CAAYlF,EAAMiB,MANtB,UAWA,4BACEK,KAAK,SACL+C,UAAU,gBACVK,aAAW,YACXS,SAAoB,IAAVtE,EACV2D,QAAS,SAACpB,GACRA,EAAMuB,kBA5GH,SAAC1D,GAChB,IAAMJ,EAAQnB,EAAOkF,WAAU,SAACK,GAAD,OAAUA,EAAKhE,KAAOA,KACrD4C,GACE,SAACM,GACC,IAAMiB,EAAG,YAAOjB,GAGhB,OAFAiB,EAAIvE,EAAQ,GAAKsD,EAAKtD,GACtBuE,EAAIvE,GAASsD,EAAKtD,EAAQ,GACnBuE,IAET,CAAEvE,MAAOA,EAAQ,EAAGG,QAAStB,EAAOmB,GAAOG,UAoGjCqE,CAASrF,EAAMiB,MAPnB,UAYA,4BACEK,KAAK,SACL+C,UAAU,iBACVK,aAAW,aACXS,SAAUtE,IAAUnB,EAAOkB,OAAS,EACpC4D,QAAS,SAACpB,GACRA,EAAMuB,kBA3GF,SAAC1D,GACjB,IAAMJ,EAAQnB,EAAOkF,WAAU,SAACK,GAAD,OAAUA,EAAKhE,KAAOA,KACrD4C,GACE,SAACM,GACC,IAAMiB,EAAG,YAAOjB,GAGhB,OAFAiB,EAAIvE,EAAQ,GAAKsD,EAAKtD,GACtBuE,EAAIvE,GAASsD,EAAKtD,EAAQ,GACnBuE,IAET,CAAEvE,MAAOA,EAAQ,EAAGG,QAAStB,EAAOmB,GAAOG,UAmGjCsE,CAAUtF,EAAMiB,MAPpB,eAeN,yBAAKoD,UAAU,oBACb,4BAAQ/C,KAAK,SAASkD,QAASN,GAA/B,aAGA,4BACE5C,KAAK,SACLkD,QAASR,EACTmB,SAA4B,IAAlBzF,EAAOkB,QAHnB,cAOA,4BACEU,KAAK,SACLkD,QAASP,EACTkB,SAA4B,IAAlBzF,EAAOkB,QAHnB,eAOA,4BACEU,KAAK,SACLkD,QA3Ha,WACnBX,GACE,SAACM,GAAD,OAAU,YAAIA,GAAMoB,iBACH3B,IAAjBf,EACI,CACEhC,MAAOnB,EAAOkB,OAAS,EAAIiC,EAC3B7B,QAAStB,EAAOmD,GAAc7B,cAEhC4C,IAoHAuB,SAAUzF,EAAOkB,QAAU,GAH7B,oBCjPJ4E,EAdgB,WAClB,IACE,IAAMC,EAAOC,KAAKC,MAAMC,aAAaC,QAJrB,wBAI6C,IAE7D,OADAJ,EAAKK,SAASC,cAAgB,IAAIC,IAC3BP,EACP,MAAOQ,GACP,OAAO,MAQOC,GA0CHC,EAxCO,WAAO,IAAD,EACIvD,mBAAkB4C,GADtB,mBACnBxE,EADmB,KACVoF,EADU,OAEkBxD,mBAAS,GAF3B,mBAEnByD,EAFmB,KAEHC,EAFG,KA4B1B,OACE,yBAAKjC,UAAU,eACb,kBAAC,IAAD,CACEE,IAAK8B,EACLb,YAAaA,EACbe,SAxBW,SACf5E,EACAmE,GAjBgB,IAACL,EAoBJ,MAAXzE,GACCwF,IAAQ7E,EAAUX,EAAQW,WAC1B6E,IAAQV,EAAU9E,EAAQ8E,WAE3BM,EAAW,CACTzE,SAAUA,EAAS2C,KAAI,SAACmC,GACtB,OAAO,eAAMA,MAEfX,SAAS,eAAOA,KA5BHL,EA+BL,CAAE9D,WAAUmE,YA9B1BF,aAAac,QAbK,sBAagBhB,KAAKiB,UAAUlB,OAwC7C,kBAAC,EAAD,CAAUzE,QAASA,EAAS2B,UA/Bd,SAAC3B,GACjBsF,GAAkB,SAACM,GAAD,OAAaA,EAAU,KACzCpB,EAAcxE,OCtBE6F,QACW,cAA7BtD,OAAOuD,SAASC,UAEe,UAA7BxD,OAAOuD,SAASC,UAEhBxD,OAAOuD,SAASC,SAASC,MACvB,2DCZNC,IAASzG,OACP,kBAAC,IAAM0G,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhH,MAAK,SAACiH,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3fab5032.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nconst CONFIRM_MESSAGE = \"Any unsaved changes will be lost.  Are you sure?\";\n\nexport const useModifiedCheck = () => {\n  const [modified, setModified] = useState(false);\n  const onUnload = useCallback(\n    (event) => {\n      if (modified) {\n        if (event) {\n          // NB: Chrome & Firefox ignore the message but display an equivalent generic message\n          event.returnValue = CONFIRM_MESSAGE;\n          event.preventDefault();\n          return event;\n        }\n        return CONFIRM_MESSAGE;\n      }\n    },\n    [modified]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", onUnload);\n    return () => {\n      window.removeEventListener(\"beforeunload\", onUnload);\n    };\n  }, [onUnload]);\n\n  return setModified;\n};\n","import { fileSave } from \"browser-fs-access\";\n// @ts-ignore\nimport GIF from \"gif.js/dist/gif\";\n\nimport { Scene } from \"./types\";\n\nexport const exportToGif = (scenes: Scene[]) =>\n  new Promise((resolve) => {\n    const gif = new GIF();\n    scenes.forEach((scene) => {\n      gif.addFrame(scene.imageData);\n    });\n    gif.on(\"finished\", (blob: Blob) => {\n      fileSave(blob, {\n        fileName: \"excalidraw-claymate.gif\",\n      }).then(resolve);\n    });\n    gif.render();\n  });\n","import { fileSave } from \"browser-fs-access\";\nimport { exportToSvg } from \"@excalidraw/excalidraw\";\n\nimport { Scene } from \"./types\";\n\nexport const exportToHtml = async (scenes: Scene[]) => {\n  let html = `\n    <html>\n      <style>\n        svg { width: 100%; height: 100%; }\n      </style>\n      <script>\n        let index = 0;\n        document.addEventListener('DOMContentLoaded', () => {\n          document.getElementById('scene' + index).style.display = 'block';\n        });\n        document.addEventListener('keydown', (event) => {\n          if (event.key === 'ArrowRight' && index < ${scenes.length - 1}) {\n            document.getElementById('scene' + index).style.display = 'none';\n            index += 1;\n            document.getElementById('scene' + index).style.display = 'block';\n          }\n          if (event.key === 'ArrowLeft' && index > 0) {\n            document.getElementById('scene' + index).style.display = 'none';\n            index -= 1;\n            document.getElementById('scene' + index).style.display = 'block';\n          }\n          if (event.key.toLowerCase() === \"f\") {\n            if (document.fullscreenElement === document.body) {\n              document.exitFullscreen();\n            } else {\n              document.body.requestFullscreen();\n            }\n          }\n        });\n      </script>\n      <body>\n  `;\n  scenes.forEach((scene, index) => {\n    const svg: SVGSVGElement = exportToSvg(scene.drawing);\n    svg.id = `scene${index}`;\n    svg.style.display = \"none\";\n    html += svg.outerHTML;\n  });\n  html += \"</body></html>\";\n  await fileSave(new Blob([html], { type: \"text/html\" }), {\n    fileName: \"excalidraw-claymate.html\",\n  });\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { exportToCanvas } from \"@excalidraw/excalidraw\";\n\nimport \"./Claymate.css\";\nimport { Drawing, Scene } from \"./types\";\nimport { useModifiedCheck } from \"./useModifiedCheck\";\nimport { exportToGif } from \"./exportToGif\";\nimport { exportToHtml } from \"./exportToHtml\";\n\nconst createScene = (\n  drawing: Drawing,\n  size?: { width: number; height: number }\n): Scene | undefined => {\n  const canvas = exportToCanvas({ elements: drawing.elements });\n  const width = size ? size.width : canvas.width;\n  const height = size ? size.height : canvas.height;\n  const ctx = canvas.getContext(\"2d\");\n  if (ctx) {\n    return {\n      id: nanoid(),\n      width,\n      height,\n      imageData: ctx.getImageData(0, 0, width, height),\n      drawing,\n    };\n  }\n};\n\nconst Preview: React.FC<{ scene: Scene }> = ({ scene }) => {\n  const ref = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    if (!ref.current) return;\n    const ctx = ref.current.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.putImageData(scene.imageData, 0, 0);\n  }, [scene]);\n  return <canvas ref={ref} width={scene.width} height={scene.height} />;\n};\n\ntype Props = {\n  drawing: Drawing;\n  onRestore: (drawing: Drawing) => void;\n};\n\nconst Claymate: React.FC<Props> = ({ drawing, onRestore }) => {\n  const [currentIndex, setCurrentIndex] = useState<number | undefined>();\n  const [scenes, setScenes] = useState<Scene[]>([]);\n  const setModified = useModifiedCheck();\n\n  const currentScene =\n    currentIndex !== undefined && currentIndex < scenes.length\n      ? { ...scenes[currentIndex], drawing }\n      : undefined;\n\n  const moveToScene = (index: number) => {\n    onRestore(scenes[index].drawing);\n    setCurrentIndex(index);\n  };\n\n  const updateScenes = useCallback(\n    (\n      updater: (prev: Scene[]) => Scene[],\n      newCurrent?: { index: number; drawing: Drawing }\n    ) => {\n      setScenes(updater);\n      setModified(true);\n      if (newCurrent) {\n        onRestore(newCurrent.drawing);\n        setCurrentIndex(newCurrent.index);\n      }\n    },\n    [setModified, setCurrentIndex, onRestore]\n  );\n\n  const exportGif = async () => {\n    await exportToGif(scenes);\n    setModified(false);\n  };\n\n  const exportHtml = async () => {\n    await exportToHtml(scenes);\n    setModified(false);\n  };\n\n  const addScene = useCallback(() => {\n    if (drawing) {\n      const scene = createScene(\n        drawing,\n        scenes[0] && {\n          width: scenes[0].width,\n          height: scenes[0].height,\n        }\n      );\n      if (scene) {\n        updateScenes((prev) => [...prev, scene], {\n          index: scenes.length,\n          drawing: drawing,\n        });\n      }\n    }\n  }, [updateScenes, scenes, drawing]);\n\n  const deleteScene = (id: string) => {\n    const index = scenes.findIndex((sc) => sc.id === id);\n    if (index >= 0) {\n      const remainingScenes = scenes.length - 1;\n      let newIndex;\n      if (remainingScenes > 0) {\n        newIndex = index < remainingScenes ? index : remainingScenes - 1;\n      }\n      const newCurrent =\n        newIndex !== undefined\n          ? { index: newIndex, drawing: scenes[newIndex].drawing }\n          : undefined;\n\n      updateScenes((prev) => prev.filter((item) => item.id !== id), newCurrent);\n    }\n  };\n\n  const moveLeft = (id: string) => {\n    const index = scenes.findIndex((item) => item.id === id);\n    updateScenes(\n      (prev) => {\n        const tmp = [...prev];\n        tmp[index - 1] = prev[index];\n        tmp[index] = prev[index - 1];\n        return tmp;\n      },\n      { index: index - 1, drawing: scenes[index].drawing }\n    );\n  };\n\n  const moveRight = (id: string) => {\n    const index = scenes.findIndex((item) => item.id === id);\n    updateScenes(\n      (prev) => {\n        const tmp = [...prev];\n        tmp[index + 1] = prev[index];\n        tmp[index] = prev[index + 1];\n        return tmp;\n      },\n      { index: index + 1, drawing: scenes[index].drawing }\n    );\n  };\n\n  const reverseOrder = () => {\n    updateScenes(\n      (prev) => [...prev].reverse(),\n      currentIndex !== undefined\n        ? {\n            index: scenes.length - 1 - currentIndex,\n            drawing: scenes[currentIndex].drawing,\n          }\n        : undefined\n    );\n  };\n\n  useEffect(() => {\n    if (scenes.length === 0) {\n      addScene();\n    }\n  }, [scenes, addScene]);\n\n  let requiredWidth: number | undefined;\n  let requiredHeight: number | undefined;\n  if (currentScene != null && scenes.length !== 1) {\n    requiredWidth = currentScene.width;\n    requiredHeight = currentScene.height;\n  }\n\n  useEffect(() => {\n    if (currentIndex != null) {\n      const scene = createScene(\n        drawing,\n        requiredWidth === undefined || requiredHeight === undefined\n          ? undefined\n          : {\n              width: requiredWidth,\n              height: requiredHeight,\n            }\n      );\n      if (scene) {\n        updateScenes((prev) => {\n          const result = [...prev];\n          result[currentIndex] = scene;\n          return result;\n        }, undefined);\n      }\n    }\n  }, [\n    drawing,\n    currentIndex,\n    scenes.length,\n    updateScenes,\n    requiredWidth,\n    requiredHeight,\n  ]);\n\n  return (\n    <div className=\"Claymate\">\n      <div className=\"Claymate-scenes\">\n        {scenes.map((scene, index) => (\n          <div\n            key={scene.id}\n            className={`Claymate-scene ${\n              index === currentIndex ? \"Claymate-current-scene\" : \"\"\n            }`}\n            onClick={() => moveToScene(index)}\n          >\n            <Preview scene={scene} />\n            <button\n              type=\"button\"\n              className=\"Claymate-delete\"\n              aria-label=\"Delete\"\n              onClick={(event) => {\n                event.stopPropagation();\n                deleteScene(scene.id);\n              }}\n            >\n              &#x2716;\n            </button>\n            <button\n              type=\"button\"\n              className=\"Claymate-left\"\n              aria-label=\"Move Left\"\n              disabled={index === 0}\n              onClick={(event) => {\n                event.stopPropagation();\n                moveLeft(scene.id);\n              }}\n            >\n              &#x2b05;\n            </button>\n            <button\n              type=\"button\"\n              className=\"Claymate-right\"\n              aria-label=\"Move Right\"\n              disabled={index === scenes.length - 1}\n              onClick={(event) => {\n                event.stopPropagation();\n                moveRight(scene.id);\n              }}\n            >\n              &#x27a1;\n            </button>\n          </div>\n        ))}\n      </div>\n      <div className=\"Claymate-buttons\">\n        <button type=\"button\" onClick={addScene}>\n          Add scene\n        </button>\n        <button\n          type=\"button\"\n          onClick={exportGif}\n          disabled={scenes.length === 0}\n        >\n          Export GIF\n        </button>\n        <button\n          type=\"button\"\n          onClick={exportHtml}\n          disabled={scenes.length === 0}\n        >\n          Export HTML\n        </button>\n        <button\n          type=\"button\"\n          onClick={reverseOrder}\n          disabled={scenes.length <= 1}\n        >\n          Reverse order\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Claymate;\n","import React, { useState } from \"react\";\nimport Excalidraw from \"@excalidraw/excalidraw\";\nimport { AppState } from \"@excalidraw/excalidraw/types/types\";\nimport { ExcalidrawElement } from \"@excalidraw/excalidraw/types/element/types\";\nimport isEqual from \"lodash/isEqual\";\n\nimport \"./App.css\";\nimport Claymate from \"./Claymate\";\nimport { Drawing } from \"./types\";\n\nconst STORAGE_KEY = \"excalidraw-elements\";\n\nconst loadStorage = () => {\n  try {\n    const data = JSON.parse(localStorage.getItem(STORAGE_KEY) || \"\");\n    data.appState.collaborators = new Map();\n    return data;\n  } catch (e) {\n    return null;\n  }\n};\n\nconst saveStorage = (data: unknown) => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n};\n\nlet initialData = loadStorage();\n\nconst App: React.FC = () => {\n  const [drawing, setDrawing] = useState<Drawing>(initialData);\n  const [drawingVersion, setDrawingVersion] = useState(0);\n\n  const onRestore = (drawing: Drawing) => {\n    setDrawingVersion((version) => version + 1);\n    initialData = drawing;\n  };\n\n  const onChange = (\n    elements: readonly ExcalidrawElement[],\n    appState: AppState\n  ) => {\n    if (\n      drawing == null ||\n      !isEqual(elements, drawing.elements) ||\n      !isEqual(appState, drawing.appState)\n    ) {\n      setDrawing({\n        elements: elements.map((el) => {\n          return { ...(el as any) };\n        }),\n        appState: { ...(appState as any) },\n      });\n    }\n    saveStorage({ elements, appState });\n  };\n\n  return (\n    <div className=\"ClaymateApp\">\n      <Excalidraw\n        key={drawingVersion}\n        initialData={initialData}\n        onChange={onChange}\n      />\n      <Claymate drawing={drawing} onRestore={onRestore} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}